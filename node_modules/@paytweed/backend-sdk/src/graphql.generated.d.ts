import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export type Mutation = {
    handleMessage: Scalars['String'];
};
export type MutationHandleMessageArgs = {
    message: Scalars['String'];
    whitelabelPlatformUserEmail: Scalars['String'];
    whitelabelPlatformUserId: Scalars['String'];
};
export type Query = {
    health: Scalars['String'];
};
export type HandleMessageMutationVariables = Exact<{
    message: Scalars['String'];
    userId: Scalars['String'];
    userEmail: Scalars['String'];
}>;
export type HandleMessageMutation = {
    handleMessage: string;
};
export declare const HandleMessageDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    handleMessage(variables: HandleMessageMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{
        data: HandleMessageMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
