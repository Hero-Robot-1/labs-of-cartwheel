import { Blockchain, CoinGetBalancePayload, CoinGetTransactionsPayload, CoinTransaction, CryptoExchangeRate, CryptoGetBalancePayload, CryptoGetTransactionsPayload, Environment, Nft, NftGetBalancePayload, NftGetTransactionsPayload, NftPurchaseBackendPayload, NftTransaction, TokenBalance, TokenGetBalancePayload, TokenGetTransactionsPayload, TokenTransaction, WalletChangeUserId, WalletGetAddressesPayload, WalletGetAddressPayload } from '@paytweed/shared-sdk';
export type UserIdentity = {
    userId: string;
};
type TweedBackendSdkCallbacks = {
    getNftPurchaseData: ({ nftId }: {
        nftId: string;
    }) => Promise<NftPurchaseBackendPayload>;
};
export type TweedBackendSDKOptions = {
    apiKey: string;
    apiSecret: string;
    callbacks?: TweedBackendSdkCallbacks;
    defaultBlockchainIds: string[];
    environment?: Environment;
};
export type TweedBackendSDKApi = {
    blockchain: {
        list: () => Promise<Blockchain[]>;
    };
    coin: {
        getBalance: (payload: CoinGetBalancePayload & UserIdentity) => Promise<string>;
        getTransactions: (payload: CoinGetTransactionsPayload & UserIdentity) => Promise<{
            [blockchainId: string]: CoinTransaction[];
        }>;
    };
    crypto: {
        getBalance: (payload: CryptoGetBalancePayload & UserIdentity) => Promise<{
            [blockchainId: string]: TokenBalance[];
        }>;
        getExchangeRates: () => Promise<CryptoExchangeRate[]>;
        getTransactions: (payload: CryptoGetTransactionsPayload & UserIdentity) => Promise<{
            [blockchainId: string]: TokenTransaction[];
        }>;
    };
    handleMessageFromFrontend: (message: string, userId: string, userEmail: string) => Promise<string>;
    nft: {
        getBalance: (payload: NftGetBalancePayload & UserIdentity) => Promise<{
            [blockchainId: string]: Nft[];
        }>;
        getTransactions: (payload: NftGetTransactionsPayload & UserIdentity) => Promise<{
            [blockchainId: string]: NftTransaction[];
        }>;
    };
    token: {
        getBalance: (payload: TokenGetBalancePayload & UserIdentity) => Promise<{
            [blockchainId: string]: TokenBalance[];
        }>;
        getTransactions: (payload: TokenGetTransactionsPayload & UserIdentity) => Promise<{
            [blockchainId: string]: TokenTransaction[];
        }>;
    };
    user: {
        changeId: (payload: WalletChangeUserId) => Promise<string>;
    };
    wallet: {
        exists: (payload: UserIdentity) => Promise<boolean>;
        getAddress: (payload: WalletGetAddressPayload & UserIdentity) => Promise<string>;
        getAddresses: (payload: WalletGetAddressesPayload & UserIdentity) => Promise<{
            [blockchainId: string]: string;
        }>;
        getRecoveryStatus: (payload: UserIdentity) => Promise<string[]>;
    };
};
export {};
