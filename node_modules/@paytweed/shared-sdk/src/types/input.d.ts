export type BlockchainProviderPayload = {
    chainId: string;
};
export type CoinBuyPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    cryptoCurrencyId: string;
} & T;
export type CoinGetBalancePayload = {
    blockchainIds?: string[];
};
export type CoinGetTransactionsPayload = {
    blockchainIds?: string[];
};
export type CoinSendToUserPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    value: string;
    userId: string;
} & T;
export type CoinSendToWalletPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    value: string;
    walletAddress: string;
    gasLimit?: string;
    gasPrice?: string;
} & T;
export type CryptoGetBalancePayload = {
    blockchainIds?: string[];
};
export type CryptoGetTransactionsPayload = {
    blockchainIds?: string[];
};
export type NftPurchaseFrontendPayload<TData = any, T = WidgetOptions<TData>> = {
    nftId: string;
    toWalletAddress?: string;
    customMintParams?: Record<string, any>;
} & T;
export type NftGetBalancePayload = {
    blockchainIds?: string[];
};
export type NftGetTransactionsPayload = {
    blockchainIds?: string[];
};
export type NftSendToUserPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    contractAddress: string;
    tokenId: string;
    userId: string;
} & T;
export type NftSendToWalletPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    contractAddress: string;
    tokenId: string;
    walletAddress: string;
} & T;
export type TokenGetBalancePayload = {
    blockchainIds?: string[];
};
export type TokenGetTransactionsPayload = {
    blockchainIds?: string[];
};
export type TokenSendToUserPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    value: string;
    tokenAddress: string;
    userId: string;
    tokenId?: string;
} & T;
export type TokenSendToWalletPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    value: string;
    tokenAddress: string;
    walletAddress: string;
    tokenId?: string;
} & T;
export type TransactionSendPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    transaction: any;
} & T;
export type TransactionBatchPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
    transactions: {
        value: string;
        walletAddress: string;
        gasLimit?: string;
        gasPrice?: string;
        data?: any;
    }[];
} & T;
export type WalletChangeUserId = {
    userId: string;
    newUserId: string;
};
export type WalletCreatePayload<TData = any, T = WidgetOptions<TData>> = T;
export type WalletCreateRecoveryPayload<TData = any, T = WidgetOptions<TData>> = T;
export type WalletLoginPayload<TData = any, T = WidgetOptions<TData>> = T;
export type WalletGetAddressPayload = {
    blockchainId: string;
};
export type WalletGetAddressesPayload = {
    blockchainIds?: string[];
};
export type WalletShowAddressPayload<TData = any, T = WidgetOptions<TData>> = {
    blockchainId: string;
} & T;
export type WalletShowRecoveryPhrasePayload<TData = any, T = WidgetOptions<TData>> = T;
export type WalletSignMessagePayload<TData = any, T = WidgetOptions<TData>> = T & {
    message: string;
    blockchainId: string;
};
export type WidgetCallbacks<TData> = {
    onClose?: (payload?: TData) => void;
    onError?: (payload?: TData) => void;
    onSuccess?: (payload?: TData) => void;
};
export type WidgetOptions<TData> = {
    callbacks?: WidgetCallbacks<TData>;
    settings?: WidgetSettings;
};
export type WidgetSettings = {
    returnUrl?: boolean;
    fullScreen?: boolean;
    hideMenu?: boolean;
    preventClose?: boolean;
    hide?: boolean;
    theme?: 'light' | 'dark';
};
