export type Blockchain = {
    chainId?: number;
    coin: {
        decimals: number;
        logo: string;
        name: string;
        symbol: string;
    };
    id: string;
    name: string;
    testnet: boolean;
    uriPrefix: string;
    explorer: {
        name: string;
        domain: string;
        paths: {
            address: string;
        };
    };
};
export type CoinTransaction = {
    createdAt: string;
    id: string;
    nonce: string;
    fromAddress: string;
    toAddress: string;
    value: string;
    gasUsed: string;
    gasPrice: string;
    status: string;
    direction: string;
    coinMetadata: {
        coinName: string;
        coinSymbol: string;
        coinDecimals: string;
        coinLogo: string;
    };
};
export type CryptoExchangeRate = {
    cryptoCurrencyId: string;
    fiatCurrencyId: string;
    id: string;
    rate: string;
};
export declare enum CryptoTransactionType {
    buy = "buy",
    fund = "fund",
    receive = "receive",
    sell = "sell",
    send = "send"
}
export type NftMedia = {
    format?: string;
    gateway: string;
    raw: string;
    thumbnail?: string;
};
export type Nft = {
    tokenAddress: string;
    tokenMedia: NftMedia[];
    tokenName: string;
    tokenId: string;
};
export type NftPurchaseBackendPayload = {
    priceInCents?: number;
    priceInCrypto?: string;
    description: string;
    contractAddress: string;
    chain: string;
    fiatCurrencyId: string;
    nftId: string;
    tokenUri: string;
    title: string;
    abi: string | Record<string, any> | Array<Record<string, any>>;
    customMintParams?: Record<string, any>;
};
export type NftTransaction = {
    createdAt: string;
    tokenMetadata: Nft;
    direction: string;
    toAddress: string;
    fromAddress: string;
    gasUsed: string;
    id: string;
    gasPrice: string;
    status: string;
    nonce: string;
};
export type Token = {
    tokenAddress: string;
    tokenName: string;
    tokenSymbol: string;
    tokenDecimals: string;
};
export type TokenBalance = {
    value: string;
    tokenMetadata: Token;
};
export type TokenTransaction = {
    createdAt: string;
    value: string;
    tokenMetadata: {
        tokenAddress: string;
        tokenDecimals: string;
        tokenName: string;
        tokenSymbol: string;
    };
    contractAddress: string;
    direction: string;
    toAddress: string;
    fromAddress: string;
    gasUsed: string;
    id: string;
    gasPrice: string;
    status: string;
    nonce: string;
};
export type CryptoTransaction = {
    createdAt: string;
    value: string;
    tokenMetadata?: {
        tokenAddress: string;
        tokenDecimals: string;
        tokenName: string;
        tokenSymbol: string;
    };
    coinMetadata?: {
        coinName: string;
        coinSymbol: string;
        coinDecimals: string;
    };
    contractAddress: string;
    direction: string;
    toAddress: string;
    fromAddress: string;
    gasUsed: string;
    id: string;
    gasPrice: string;
    status: string;
    nonce: string;
};
export type Coin = {
    coinName: string;
    coinSymbol: string;
    coinDecimals: string;
};
export type CoinBalance = Coin & {
    value: string;
};
